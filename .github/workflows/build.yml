name: Build

on:
  push:
    branches:
      - main
      - development
  workflow_dispatch:

permissions:
     id-token: write 
     contents: read

jobs:
     
  CodestyleCheck:
   runs-on: ubuntu-latest

   steps:    
    - name: Access fetched environment variables
      run: |
          echo "Environment Name: ${{ needs.fetch-vars.outputs.ENV_NAME }}"
          echo "${{ needs.fetch-vars.outputs.variables }}" > .env
          echo "${{ needs.fetch-vars.outputs.env_variables }}" >> .env
          source .env
          echo "Repo Variable: $MY_VAR"
          echo "Environment Variable: $DB_PASSWORD"
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Run ESLint
      run: npx eslint .

  GitleaksCheck:
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: GitLeaks  
    - uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  SNYK:
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Snyk_Security
      uses: procter-gamble/de-atom-library@snyk-main
      with:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  SonarScan:
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Sonar analysis
      uses: sonarsource/sonarqube-scan-action@master
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Sonar quality gates
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }

  unitTests:
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Run unit tests
      run: npm test
      
  build:
    runs-on: ubuntu-latest
    needs: [ CodestyleCheck , GitleaksCheck, SNYK, SonarScan, unitTests ]

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Generate unique artifact name
      id: set-output
      run: echo "ARTIFACT_NAME=build-artifact-${{ github.run_number }}.zip" >> $GITHUB_OUTPUT

    - name: Zip project
      run: zip -r build-artifact-${{ github.run_number }}.zip .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build-artifact-${{ github.run_number }}.zip

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WIF_POOL }}/providers/${{ secrets.WIF_PROVIDER }}'
        service_account: ${{ secrets.GCP_SERVICE_ACCT }}

    - name: Deploy to GCP
      uses: google-github-actions/deploy-cloud-functions@v3
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        name: ${{ vars.FUNCTION_NAME }}
        region: ${{ vars.GCP_REGION }}
        runtime: nodejs16
