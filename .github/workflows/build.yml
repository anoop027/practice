name: Build

on:
  push:
    branches:
      - main
      - development
  workflow_dispatch:

permissions:
     id-token: write 
     contents: read

jobs:
     
  CodestyleCheck:
   runs-on: ubuntu-latest

   steps:    
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Run ESLint
      run: npx eslint .

  GitleaksCheck:
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: GitLeaks  
    - uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  SNYK:
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Snyk_Security
      uses: procter-gamble/de-atom-library@snyk-main
      with:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  SonarScan:
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Sonar analysis
      uses: sonarsource/sonarqube-scan-action@master
      env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

    - name: Sonar quality gates
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }

  unitTests:
    runs-on: ubuntu-latest

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Run unit tests
      run: npm test
      
  build:
    runs-on: ubuntu-latest
    needs: [ CodestyleCheck , GitleaksCheck, SNYK, SonarScan, unitTests ]

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '20'

    - name: Install dependencies
      run: npm install

    - name: Generate unique artifact name
      id: set-output
      run: echo "ARTIFACT_NAME=build-artifact-${{ github.run_number }}.zip" >> $GITHUB_OUTPUT

    - name: Zip project
      run: zip -r build-artifact-${{ github.run_number }}.zip .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build-artifact-${{ github.run_number }}.zip

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}

    steps:
    - name: Setup
      uses: ./.github/workflows/setup
      with:
        gh_token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Authenticate to GCP
      id: auth
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/${{ secrets.PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.WIF_POOL }}/providers/${{ secrets.WIF_PROVIDER }}'
        service_account: ${{ secrets.GCP_SERVICE_ACCT }}

    - name: Deploy to GCP
      uses: google-github-actions/deploy-cloud-functions@v3
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        name: ${{ vars.FUNCTION_NAME }}
        region: ${{ vars.GCP_REGION }}
        runtime: nodejs16

# name: Build

# on:
#   push:
#     branches:
#       - master
#       - development
#   workflow_dispatch:

# permissions:
#      id-token: write 
#      contents: read 


# jobs:
#   build:
#     runs-on: ubuntu-latest
    
#     outputs:
#       ARTIFACT_NAME: ${{ steps.set-output.outputs.ARTIFACT_NAME }}

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4

#     - name: Set up Node.js
#       uses: actions/setup-node@v2
#       with:
#         node-version: '14'

#     - name: Install dependencies
#       run: npm install

#     - name: Run tests
#       run: npm test

#     - name: Build project
#       run: npm run build
      
#     - name: Generate unique artifact name
#       id: set-output
#       run: echo "ARTIFACT_NAME=build-artifact-${{ github.run_number }}.zip" >> $GITHUB_OUTPUT
      
#     - name: Zip project
#       run: zip -r ${{ steps.set-output.outputs.ARTIFACT_NAME }} .

#     - name: Upload build artifacts
#       uses: actions/upload-artifact@v4
#       with:
#         name: build-artifacts
#         path: ${{ steps.set-output.outputs.ARTIFACT_NAME }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build

    
#     environment:
#       name: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v4
#     - name: Download build artifacts
#       uses: actions/download-artifact@v4
#       with:
#        name: build-artifacts
#        path: ./build-artifacts


#     - name: Authenticate to GCP
#       id: auth
#       uses: google-github-actions/auth@v2
#       with:
#         workload_identity_provider: 'projects/588006826849/locations/global/workloadIdentityPools/git-pool/providers/github'
#         service_account: 'github-act-svc@awesome-pilot-439007-s9.iam.gserviceaccount.com'

        
#     - name: Artifact upload to Google storage bucket
#       uses: google-github-actions/upload-cloud-storage@v1
#       with:
#         path: ./build-artifacts/${{ needs.build.outputs.ARTIFACT_NAME }}
#         destination: 'node-artifact'
       
    # - name: Deploy to GCP
    #   env:
    #     GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
    #     GCP_FUNCTION_NAME: ${{ vars.GCP_FUNCTION_NAME }}
    #     GCP_REGION: ${{ vars.GCP_REGION }}
    #   run: |
    #     echo $HOME
    #     pwd
        
    #     #gcloud auth login --cred-file=FILEPATH.json
    #     #gcloud config set project $GCP_PROJECT_ID
    #     #gcloud auth login --impersonate-service-account='github-act-svc@awesome-pilot-439007-s9.iam.gserviceaccount.com'

    #     #gcloud functions deploy nodefunction22 --runtime nodejs16 --trigger-http --allow-unauthenticated --region us-east1 --source .
    #     gcloud functions deploy 'nodefunction22' \
    #     --runtime nodejs16 \
    #     --trigger-http \
    #     --allow-unauthenticated \
    #     --region 'us-east1' \
    #     --source .
    #     # gcloud functions add-iam-policy-binding $GCP_FUNCTION_NAME \
    #     # --region $GCP_REGION \
    #     # --member="allUsers" \
    #     # --role="roles/cloudfunctions.invoker"

    # - name: Deploy to GCP
    #   env:
    #      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
    #      GCP_FUNCTION_NAME: ${{ vars.GCP_FUNCTION_NAME }}
    #      GCP_REGION: ${{ vars.GCP_REGION }}
    #   uses: google-github-actions/deploy-cloud-functions@v3
    #   with:
    #     project_id: 'awesome-pilot-439007-s9'
    #     name: 'nodefunction22'
    #     region: us-east1
    #     runtime: nodejs16


# name: Build

# on:
#   push:
#     branches:
#       - master
#       - development
#   workflow_dispatch:


# permissions:
#   contents: read
#   actions: write
#   deployments: write

# jobs:

#   setup:
#     runs-on: ubuntu-latest
#     outputs:
#       ENV_NAME: ${{ steps.set-env.outputs.ENV_NAME }}
#       VARIABLES_FILE: ${{ steps.fetch-vars.outputs.variables-file }}
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2
#       - name: Determine Environment
#         id: set-env
#         run: |
#           if [ "${{ github.ref }}" == "refs/heads/master" ]; then
#             echo "::set-output name=ENV_NAME::production"
#           else
#             echo "::set-output name=ENV_NAME::development"
#           fi

#       - name: Fetch environment variables
#         run: |
#           echo "Fetching environment variables for ${{ steps.set-env.outputs.ENV_NAME }}"
#           gh variable list --json name,value -e ${{ steps.set-env.outputs.ENV_NAME }} | \
#           jq -r '.[] | "\(.name)=\(.value)"' >> $GITHUB_ENV
#         env:
#           GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}


#       - name: Fetch environment variables
#         run: |
#            echo $DEMO_ENV

        
#   build:
#     runs-on: ubuntu-latest
#     needs: setup

#     # environment:
#     #   name: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}
#     environment:
#       name: ${{ needs.setup.outputs.ENV_NAME }}
      
#     outputs:
#       ARTIFACT_NAME: ${{ steps.set-output.outputs.ARTIFACT_NAME }}

#     steps:
#     # - name: Checkout code
#     #   uses: actions/checkout@v2
      
#     # - name: Set environment name
#     #   run: echo "ENV_NAME=production" >> $GITHUB_ENV

#     # - name: Fetch environment variables
#     #   run: | 
#     #      gh variable list --json name,value -e $ENV_NAME > variables-$ENV_NAME.json
#     #      cat variables-$ENV_NAME.json
#     #      cat variables-$ENV_NAME.json | jq -r '.[] | "\(.name)=\(.value)"' >> $GITHUB_ENV
#     #   env:
#     #     GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}


#     - name: Write secret to a file
#       run: |
#           echo $TEST_SECRET > secret-value.txt
#       env:
#         TEST_SECRET: ${{ secrets.DEMO_SECRET }}
          
#     - name: Upload secret value as artifact
#       uses: actions/upload-artifact@v4
#       with:
#           name: secret-value-artifact
#           path: secret-value.txt

#     # - name: Set up Node.js
#     #   uses: actions/setup-node@v2
#     #   with:
#     #     node-version: '14'

#     # - name: Install dependencies
#     #   run: npm install

#     # # - name: Run tests
#     # #   run: npm test

#     # - name: Build project
#     #   run: |
#     #     npm run build
      
#     # - name: Upload build artifacts
#     #   uses: actions/upload-artifact@v4
#     #   with:
#     #     name: build-artifacts
#     #     path: dist
    
#     # - name: Generate unique artifact name
#     #   id: set-output
#     #   run: echo "ARTIFACT_NAME=build-artifact-${{ github.run_number }}.zip" >> $GITHUB_OUTPUT
      
#     # - name: Zip project
#     #   run: zip -r ${{ steps.set-output.outputs.ARTIFACT_NAME }} .

#     # - name: Upload build artifacts
#     #   uses: actions/upload-artifact@v4
#     #   with:
#     #     name: build-artifacts
#     #     path: ${{ steps.set-output.outputs.ARTIFACT_NAME }}

#   deploy:
#     runs-on: ubuntu-latest
#     needs: [setup,build]
    
#     # environment:
#     #   name: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}
#     environment:
#       name: ${{ needs.setup.outputs.ENV_NAME }}

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2
      
#     # - name: Set environment name
#     #   run: echo "ENV_NAME=${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}" >> $GITHUB_ENV

#     # - name: Fetch environment variables
#     #   run: | 
#     #      gh variable list --json name,value -e $ENV_NAME > variables-$ENV_NAME.json
#     #      cat variables-$ENV_NAME.json
#     #      cat variables-$ENV_NAME.json | jq -r '.[] | "\(.name)=\(.value)"' >> $GITHUB_ENV
#     #   env:
#     #     GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
    
#     - name: fetch secret and env
#       run: |
#         source ${{ needs.setup.outputs.VARIABLES_FILE }}
#         echo ${{ env.DEMO_ENV }}
#         echo ${{ secrets.DEMO_SECRET }}
#       env:
#         TEST_SECRET: ${{ secrets.DEMO_SECRET }}

#     - name: Write secret to a file
#       run: |
#           echo $TEST_SECRET2 > secret-value2.txt
#       env:
#         TEST_SECRET2: ${{ secrets.DEMO_SECRET }}

#     - name: Fetch the correct secret
#       run: |
#        echo "Fetching secret for $ENV_NAME"
#        if [ "${{ github.ref }}" == "refs/heads/master" ]; then
#         echo "Production secret: ${{ secrets.DEMO_SECRET }}"
#        else
#         echo "Development secret: ${{ secrets.DEMO_SECRET }}"
#        fi
          
#     - name: Upload secret value as artifact
#       uses: actions/upload-artifact@v4
#       with:
#           name: secret-value-artifact2
#           path: secret-value2.txt
        
#     # - name: Download build artifacts
#     #   uses: actions/download-artifact@v4
#     #   with:
#     #    name: build-artifacts
#     #    path: ./
#     # - name: Authenticate to GCP
#     #   uses: google-github-actions/auth@v1
#     #   with:
#     #     credentials_json: ${{ secrets.GCP_CREDENTIALS }}

#     # - name: Artifact upload to Google storage bucket
#     #   uses: google-github-actions/upload-cloud-storage@v1
#     #   with:
#     #     path: ${{ needs.build.outputs.ARTIFACT_NAME }}
#         # destination: 'node-artifact'

#     # - name: Deploy to GCP
#     #   env:
#     #     GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
#     #     GCP_FUNCTION_NAME: ${{ secrets.GCP_FUNCTION_NAME }}
#     #     GCP_REGION: ${{ secrets.GCP_REGION }}
#     #   run: |
#     #     echo $HOME
#     #     pwd
#     #     gcloud config set project $GCP_PROJECT
#     #     gcloud functions add-iam-policy-binding $GCP_FUNCTION_NAME \
#     #     --region $GCP_REGION \
#     #     --member="allUsers" \
#     #     --role="roles/cloudfunctions.invoker"
#     #     gcloud functions deploy $GCP_FUNCTION_NAME --runtime nodejs16 --trigger-http --allow-unauthenticated --region $GCP_REGION --source gs://node-artifact/${{ needs.build.outputs.ARTIFACT_NAME }}
