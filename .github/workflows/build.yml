name: Build

on:
  push:
    branches:
      - master
      - development
  workflow_dispatch:


permissions:
  contents: read
  actions: write
  deployments: write

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      ENV_NAME: ${{ steps.set-env.outputs.ENV_NAME }}
      VARIABLES_FILE: ${{ steps.fetch-vars.outputs.variables-file }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Determine Environment
        id: set-env
        run: |
          if [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "::set-output name=ENV_NAME::production"
          else
            echo "::set-output name=ENV_NAME::development"
          fi

      - name: Fetch environment variables
        run: |
          echo "Fetching environment variables for ${{ steps.set-env.outputs.ENV_NAME }}"
          gh variable list --json name,value -e ${{ steps.set-env.outputs.ENV_NAME }} | \
          jq -r '.[] | "\(.name)=\(.value)"' > env-vars.sh
        env:
          GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

      - name: Cache environment variables
        uses: actions/cache@v3
        with:
          path: env-vars.sh
          key: ${{ runner.os }}-${{ hashFiles('env-vars.sh') }}

        
  build:
    runs-on: ubuntu-latest
    needs: setup

    # environment:
    #   name: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}
    environment:
      name: ${{ needs.setup.outputs.ENV_NAME }}
      
    outputs:
      ARTIFACT_NAME: ${{ steps.set-output.outputs.ARTIFACT_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    # - name: Set environment name
    #   run: echo "ENV_NAME=production" >> $GITHUB_ENV

    # - name: Fetch environment variables
    #   run: | 
    #      gh variable list --json name,value -e $ENV_NAME > variables-$ENV_NAME.json
    #      cat variables-$ENV_NAME.json
    #      cat variables-$ENV_NAME.json | jq -r '.[] | "\(.name)=\(.value)"' >> $GITHUB_ENV
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

    - name: Restore environment variables from cache
      uses: actions/cache@v3
      with:
          path: env-vars.sh
          key: env-vars-${{ needs.common-vars.outputs.ENV_NAME }}
          restore-keys: env-vars-

    - name: fetch secret and env
      run: |
        source ${{ needs.setup.outputs.VARIABLES_FILE }}
        echo ${{ env.DEMO_ENV }}
        echo "secret fetched is: $TEST_SECRET"
      env:
        TEST_SECRET: ${{ secrets.DEMO_SECRET }}


    - name: Write secret to a file
      run: |
          echo $TEST_SECRET > secret-value.txt
      env:
        TEST_SECRET: ${{ secrets.DEMO_SECRET }}
          
    - name: Upload secret value as artifact
      uses: actions/upload-artifact@v4
      with:
          name: secret-value-artifact
          path: secret-value.txt

    # - name: Set up Node.js
    #   uses: actions/setup-node@v2
    #   with:
    #     node-version: '14'

    # - name: Install dependencies
    #   run: npm install

    # # - name: Run tests
    # #   run: npm test

    # - name: Build project
    #   run: |
    #     npm run build
      
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: build-artifacts
    #     path: dist
    
    # - name: Generate unique artifact name
    #   id: set-output
    #   run: echo "ARTIFACT_NAME=build-artifact-${{ github.run_number }}.zip" >> $GITHUB_OUTPUT
      
    # - name: Zip project
    #   run: zip -r ${{ steps.set-output.outputs.ARTIFACT_NAME }} .

    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: build-artifacts
    #     path: ${{ steps.set-output.outputs.ARTIFACT_NAME }}

  deploy:
    runs-on: ubuntu-latest
    needs: [setup,build]
    
    # environment:
    #   name: ${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}
    environment:
      name: ${{ needs.setup.outputs.ENV_NAME }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      
    # - name: Set environment name
    #   run: echo "ENV_NAME=${{ github.ref == 'refs/heads/master' && 'production' || 'development' }}" >> $GITHUB_ENV

    # - name: Fetch environment variables
    #   run: | 
    #      gh variable list --json name,value -e $ENV_NAME > variables-$ENV_NAME.json
    #      cat variables-$ENV_NAME.json
    #      cat variables-$ENV_NAME.json | jq -r '.[] | "\(.name)=\(.value)"' >> $GITHUB_ENV
    #   env:
    #     GH_TOKEN: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
    
    - name: fetch secret and env
      run: |
        source ${{ needs.setup.outputs.VARIABLES_FILE }}
        echo ${{ env.DEMO_ENV }}
        echo ${{ secrets.DEMO_SECRET }}
      env:
        TEST_SECRET: ${{ secrets.DEMO_SECRET }}

    - name: Write secret to a file
      run: |
          echo $TEST_SECRET2 > secret-value2.txt
      env:
        TEST_SECRET2: ${{ secrets.DEMO_SECRET }}

    - name: Fetch the correct secret
      run: |
       echo "Fetching secret for $ENV_NAME"
       if [ "${{ github.ref }}" == "refs/heads/master" ]; then
        echo "Production secret: ${{ secrets.DEMO_SECRET }}"
       else
        echo "Development secret: ${{ secrets.DEMO_SECRET }}"
       fi
          
    - name: Upload secret value as artifact
      uses: actions/upload-artifact@v4
      with:
          name: secret-value-artifact2
          path: secret-value2.txt
        
    # - name: Download build artifacts
    #   uses: actions/download-artifact@v4
    #   with:
    #    name: build-artifacts
    #    path: ./
    # - name: Authenticate to GCP
    #   uses: google-github-actions/auth@v1
    #   with:
    #     credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    # - name: Artifact upload to Google storage bucket
    #   uses: google-github-actions/upload-cloud-storage@v1
    #   with:
    #     path: ${{ needs.build.outputs.ARTIFACT_NAME }}
        # destination: 'node-artifact'

    # - name: Deploy to GCP
    #   env:
    #     GCP_PROJECT: ${{ secrets.GCP_PROJECT }}
    #     GCP_FUNCTION_NAME: ${{ secrets.GCP_FUNCTION_NAME }}
    #     GCP_REGION: ${{ secrets.GCP_REGION }}
    #   run: |
    #     echo $HOME
    #     pwd
    #     gcloud config set project $GCP_PROJECT
    #     gcloud functions add-iam-policy-binding $GCP_FUNCTION_NAME \
    #     --region $GCP_REGION \
    #     --member="allUsers" \
    #     --role="roles/cloudfunctions.invoker"
    #     gcloud functions deploy $GCP_FUNCTION_NAME --runtime nodejs16 --trigger-http --allow-unauthenticated --region $GCP_REGION --source gs://node-artifact/${{ needs.build.outputs.ARTIFACT_NAME }}
